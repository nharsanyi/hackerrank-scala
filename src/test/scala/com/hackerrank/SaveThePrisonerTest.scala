package com.hackerrank

import org.scalatest.FunSuite

class SaveThePrisonerTest extends FunSuite {

  test("test1") {
    val result = SaveThePrisoner.saveThePrisoner(5, 2, 1)
    assertResult(2)(result)
  }

  test("test2") {
    val result = SaveThePrisoner.saveThePrisoner(5, 2, 2)
    assertResult(3)(result)
  }

  test("test3") {
    val result = SaveThePrisoner.saveThePrisoner(4, 6, 2)
    assertResult(3)(result)
  }

  test("test4") {
    val result = SaveThePrisoner.saveThePrisoner(3, 7, 3)
    assertResult(3)(result)
  }

  test("test5") {
    val inputS = "352926151 380324688 94730870\n94431605 679262176 5284458\n208526924 756265725 150817879\n962975336 972576181 396355184\n464237185 937820284 255816794\n649320641 742902564 647542323\n174512033 711706897 68977959\n107283902 156676511 67149447\n104513201 298399273 96292548\n113378824 274011418 98103763\n934815799 991959468 212396037\n88325121 435452998 24617705\n984873585 997634055 103050157\n344218387 715364875 90658180\n556065259 615709967 156417592\n57109959 451440582 4188603\n353972922 573651462 244520504\n946486979 973168361 647886035\n368127406 680428368 105517295\n884634320 965112925 119757238\n422557970 744431033 28932300\n634954007 957414623 341366379\n190265362 445253893 184632922\n293315518 479153471 120684020\n72410472 80198999 984948\n784893322 849791807 360911386\n846191883 880790237 510053756\n297201660 812278057 198376746\n945087694 999220046 465061514\n786859800 831171414 378370933\n528402029 859318899 224559950\n522640531 755821672 28838424\n864006909 879474138 806467486\n613544440 943850900 258190755\n734228459 928771704 265979283\n542812502 597832172 330877768\n541133561 748691081 126348492\n51187317 524866691 1143193\n885290374 990676850 373368385\n147955933 450823700 138416059\n100046465 587967212 32555061\n233926824 996957988 31809378\n785405778 835771758 689182705\n444389615 870657324 72775880\n702580369 895325888 345053199\n968559651 974760313 326732084\n299437419 514618345 254272806\n901702945 930227426 727030891\n721843209 736359383 225283784\n833018320 883439261 806599246\n267346244 307857609 46989880\n299901304 892163356 210218436\n565637506 795821687 158300457\n107336562 781910357 54488503\n513281286 916998022 254269425\n413431205 611661371 188998419\n740163288 938647312 571382392\n44702121 296589002 43470596\n771733011 919327188 317638907\n718860003 815844769 495144331\n377975600 438513404 111085209\n424965480 928959619 20776133\n234986523 732169039 205952749\n377078343 981597420 219264561\n612269027 791414524 580170106\n232336090 616084008 81392003\n75059328 274029861 53524881\n239121359 646856043 141349731\n923193147 943368157 206717532\n12565064 536852817 11557940\n360225746 970375527 284883902\n213705306 380885426 14495860\n659446919 699401237 73837176\n335372713 785363124 7610828\n538388654 859196325 110284314\n118558760 713483972 83950807\n896959032 961368580 8848444\n25543240 521123082 2472730\n258530682 935834352 194732411\n465248213 679599042 334563499\n331230504 637771661 76778140\n976340152 988657462 243958260\n552994811 922743535 540135280\n626831986 839281366 24222267\n157704591 253731033 59023773\n806377559 859228114 238044289\n838798445 996851254 268459446\n847646888 928001503 755190846\n877625009 999275937 874127074\n847949466 893343194 10497830\n35029316 784675240 8200127\n111807455 690309882 23190325\n355765714 554560093 311565654\n1890615 614626804 976253\n132293206 165429783 65360680\n506726160 934170235 455394293\n210041918 328800789 159203369\n499999999 999999997 2\n499999999 999999998 2\n999999999 999999999 1"
    val outputS = "122129406\n23525398\n72975907\n405956028\n265162707\n91803604\n82636723\n9258153\n81152217\n31978708\n269539705\n18445097\n115810626\n117586280\n216062299\n55859471\n110226121\n674567416\n49690850\n200235842\n350805362\n28872987\n59090728\n13206454\n8773474\n425809870\n544652109\n119049822\n519193865\n422682546\n27074790\n262019564\n821934714\n588497214\n460522527\n385897437\n333906011\n14136713\n478754860\n145371959\n20243482\n93060069\n739548684\n54653973\n537798717\n332932745\n170016312\n755555371\n239799957\n24001866\n87501244\n202677879\n388484637\n85042925\n144704874\n387228584\n29703127\n27144750\n465233083\n592129096\n171623012\n99804791\n233162218\n69626951\n147046575\n467740\n27317429\n70841696\n226892541\n8113004\n174582190\n181675979\n113791493\n122228525\n431091984\n86082218\n73257991\n12731011\n96444034\n83666114\n52088792\n256275569\n356889192\n236671646\n155050214\n290894843\n426512254\n835545460\n118152992\n55891557\n22230414\n42655476\n154594318\n1153181\n98497256\n376112207\n67920321\n499999999\n1\n999999999"
    val input = inputS.split("\n")
    val output = outputS.split("\n")
    val n = input.length
    for (i <- 0 to n - 1) {
      println(f"input = ${input(i)}")
      val ps = input(i).split(" ")
      val res = SaveThePrisoner.saveThePrisoner(ps(0).toInt, ps(1).toInt, ps(2).toInt)
      assertResult(output(i).toInt)(res)
      println("Passed")


    }

  }

}
